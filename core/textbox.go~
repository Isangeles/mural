/*
 * textbox.go
 *
 * Copyright 2018 Dariusz Sikora <dev@isangeles.pl>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 *
 */

package core

import (
	"fmt"
	
	"github.com/faiface/pixel"
	"github.com/faiface/pixel/imdraw"
	"github.com/faiface/pixel/pixelgl"
	"github.com/faiface/pixel/text"
	//"golang.org/x/image/colornames"
	
	"github.com/isangeles/mural/core/data"
)

// Struct for textboxes
type Textbox struct {
	bg           *imdraw.IMDraw
	textarea     *text.Text
	textContent  []string
	minId, maxId int
}

// NewTextbox creates new textbox.
func NewTextbox() (*Textbox, error) {
	t := new(Textbox)
	
	// Background.
	t.bg = imdraw.New(nil)

	// Text.
	font := data.MainFontNormal()
	atlas := text.NewAtlas(font, text.ASCII)
	t.textarea = text.New(pixel.V(0, 0), atlas)
	
	return t, nil
}

// Draw draws textbox.
func (t *Textbox) Draw(drawMin, drawMax pixel.Vec, win *pixelgl.Window) {
	// Background.
	t.bg.Color = pixel.RGB(0.4, 0.4, 0.4)
	t.bg.Push(drawMin)
	t.bg.Color = pixel.RGB(0.4, 0.4, 0.4)
	t.bg.Push(drawMax)
	t.bg.Rectangle(0)
	t.bg.Draw(win)

	// Text content.
	t.textarea.Draw(win, pixel.IM.Moved(pixel.V(win.Bounds().Min.X, win.Bounds().Max.Y - 50)))
}

// Update handles key events.
func (t *Textbox) Update(win *pixelgl.Window) {
	if win.JustPressed(pixelgl.KeyUp) {
		t.textarea.Orig.Y -= 1
	}
}

// Clears textbox and inserts specified text.
func (t *Textbox) Insert(text []fmt.Stringer) {
	t.textarea.Clear()
	t.textContent = text
	maxId = len(t.textContent) - 1
	minId = maxId - 30
	for _, line := range text {
		//c.text.Dot.X -= c.text.BoundsOf(line.W())
		fmt.Fprintln(t.textarea, line)
	}
}
